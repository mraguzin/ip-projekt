Još neki zadaci za napraviti.

Petar:
* testirati sve što do sada imamo (nisam uopće stigao dosad), dakle lexer i parser (to uključuje i typechecker ovdje); kada utvrdimo da to radi i ispravimo sve, treba naravno testirati i interpreter i usput
  sastaviti nekolicinu dobrih primjera zadataka. Bugove javi meni ili ih odmah pokušaj ispraviti u kodu ako kužiš gdje bi mogao biti uzrok
* implementirati neki od 3 genetskih operatora koji su opisani u komentarima kroz kod; oni trebaju djelovati nad jednom gljivom ili listom gljiva i uzimaju u obzir
  njen DNA atribut; DNA se nužno daje u konstruktoru gljive kao 3. parametar. Dakle npr. fungus(kolokvijalni_naziv,latinski_naziv,dna,datum_unos);
  stvara jednu takvu gljivu. Interpreter također treba biti spreman primiti i još jedan parametar povrh ovog, a taj se tiče vremena unosa/pronalaska tog uzorka.
  Ako se ne navede eksplicitno, uvijek se automatski u interpeteru uzima *trenutno* sistemsko vrijeme
  Kada ovo bude gotov, ne bi trebalo biti teško implementirati preostale operatore; to možeš i ti ili ja. NAPOMENA: dna se unosi po posebnim pravilima u ovom jeziku,
  možeš vidjeti BKG pravilo i odgovarajuću parser funkciju za detalje. Genetski operatore crpe sve potrebne parametre za rad (poput tipa distribucije za mutacije i sl.) direktno iz globalnih parametara koji se postavljaju sa setParam. Kada odlučiš da ti treba nešto za implementaciju, jednostavno dodaj to u neki globalni dict
  koji ćemo svi referencirati unutar interpreterskog koda za određeni genetski operator. Taj dict se mijenja kad se izvede određeni setparam poziv; završit ću taj dio
  interpretera danas
* odabrati neke jednostavnije primjere koda; onda ćemo zajedno odabrati koji su najbolji/nasloženiji za staviti ih u samu zadaću

Mauro:
* kompletirati interpreter, bugfixevi po potrebi: dakle, dodat ću su sada read,write,setparam kod za izvršavanje. IO se jednostavno svodi na JSON, koji je popularan
  za razmjenu raznih stvari (iako za biološke primjene poput DNA i sl. sigurno postoji nešto kompaktnije, ali za sada ne znam... mi ipak radimo nekakav općenit
  program kojim bi netko mogao voditi bazu ovakvih uzroaka, pronalazaka i simulacija, pa je dobro imati nekakvu poprilično standardiziranu reprezentaciju tih podataka,
  a JSON je tu jako raširen i dobro podržan u Pythonu)
* kada se sve sredi, dodati LaTeX tekst o projektu koji opisuje za što se može služiti i za što bi se idealno mogao koristiti kada bi još imatli cirka mjesec dana
  ili više razvojnog vremena s nekim domenskim stručnjakom/timom; ovo ne bi trebalo uzeti puno vremena jer već znam razne LaTeX trikove s Matematičkog softvera.